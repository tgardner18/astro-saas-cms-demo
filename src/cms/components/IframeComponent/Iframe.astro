---
import type {
    DisplaySettingsFragment,
    IframeFragment,
} from '../../../../__generated/sdk.ts';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload.ts';
import { getDictionaryFromDisplaySettings } from '../../../graphql/shared/displaySettingsHelpers.ts';
// import { getHeadingElementStyles } from './IframeStyling.ts';
import { isEditContext } from '../../shared/utils.ts';

const isCmsEdit = isEditContext(Astro.url);

export interface Props {
    key: string;
    data: IframeFragment;
    contentPayload: ContentPayload;
    displayTemplateKey: string;
    displaySettings: DisplaySettingsFragment[];
}
const { key, data, displaySettings } = Astro.props as Props;

const settings: Record<string, string> =
    getDictionaryFromDisplaySettings(displaySettings);

 const allWidths : { [key: string]: any } = 
    {'w-full': '',
    'w-1/4': 'md:w-1/4',
    'w-1/3': 'md:w-1/3',
    'w-1/2': 'md:w-1/2',
    'w-2/3': 'md:w-2/3',
    'w-3/4': 'md:w-3/4',
    };

const width = allWidths[data?.Width || ''] || '';

---

<div class={`mb-3`} data-epi-block-id={isCmsEdit && key || undefined}>
    <iframe class=`w-full ${width} border-0` height={data?.ManualHeight} src={data?.IframePageUrl} title={data?.Title} allow="" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div>

